import { getBridgeSignedHook } from './getBridgeSignedHook'
import { QuoteBridgeRequest } from '../types'
import { BridgeResultContext } from './types'

jest.mock('../../order-signing', () => ({
  ...jest.requireActual('../../order-signing'),
  OrderSigningUtils: {
    generateOrderId: jest.fn().mockResolvedValue({
      orderId:
        '0x5304214e957c583cf88d1d395d8be45b7fdd458e54ac711b59173f0c4afff969bbcf91605c18a9859c1d47abfeed5d2cca7097cf683edc4b',
    }),
  },
}))

const bridgeRequestMock = {
  sellTokenChainId: 1,
} as unknown as QuoteBridgeRequest

const bridgingQuoteMock = {}
const unsignedBridgeCallMock = {
  data: '0xa8481abe00000000000000000000000000000000000000000000000000000000000000a03137343936333833303439313900000000000000000000000000000000000000ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff000000000000000000000000fb3c7eb936caa12b5a884d612393969a557d430700000000000000000000000000000000000000000000000000000000000008a0000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000200000000000000000000000009585c3062df1c247d5e373cfca9167f7dc2b5963000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000006e4de792d5f00000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000120000000000000000000000000000000000000000000000000000000000000000670a082310100ffffffffff00a0b86991c6218b36c1d19d4a2e9eb0ce3606eb48095ea7b3010100ffffffffffa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48ade1209c01820300ffffff8375b6ba5fcab20848ca00f132d253638fea82e598a9cc933f01040005ffffff0075b6ba5fcab20848ca00f132d253638fea82e598ade1209c01830600ffffff8075b6ba5fcab20848ca00f132d253638fea82e5981028c2bd010780ffffffffff3a23f943181408eac424116af7b7790c94cb97a50000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000001400000000000000000000000000000000000000000000000000000000000000180000000000000000000000000000000000000000000000000000000000000046000000000000000000000000000000000000000000000000000000000000004a000000000000000000000000000000000000000000000000000000000000004e00000000000000000000000000000000000000000000000000000000000000520000000000000000000000000000000000000000000000000000000000000056000000000000000000000000000000000000000000000000000000000000000200000000000000000000000002bfcacf7ff137289a2c4841ea90413ab5110303200000000000000000000000000000000000000000000000000000000000000200000000000000000000000003a23f943181408eac424116af7b7790c94cb97a500000000000000000000000000000000000000000000000000000000000002c000000000000000000000000000000000000000000000000000000000000002a0792ebcb90000000000000000000000000000000000000000000000000000000000b2b61f000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000c00000000000000000000000000000000000000000000000000000000000000120000000000000000000000000000000000000000000000000000000000000018000000000000000000000000000000000000000000000000000000000000001e00000000000000000000000000000000000000000000000000000000000001d010000000000000000000000000000000000000000000000000000000000000a2d00000000000000000000000000000000000000000000000000000000000000020000000000000000000000002bfcacf7ff137289a2c4841ea90413ab51103032000000000000000000000000fb3c7eb936caa12b5a884d612393969a557d43070000000000000000000000000000000000000000000000000000000000000002000000000000000000000000a0b86991c6218b36c1d19d4a2e9eb0ce3606eb48000000000000000000000000af88d065e77c8cc2239327c5edb3a432268e583100000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000b2991e000000000000000000000000000000000000000000000000000000000000a4b100000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000068495c1b000000000000000000000000000000000000000000000000000000006849b021d00dfeeddeadbeef765753be7f7a64d5509974b0d678e1e3149b02f40000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000b2b61f00000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000b2991e000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000001e4000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000001ad000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000041f7595c23819be22b37f7bc8177b35744f0c595bd8bb4ca7a01501edff80d41c246b7d32fb1bec41c37e0a029f28160fdab432c273675461d0e4b9c413b9f280d1b00000000000000000000000000000000000000000000000000000000000000',
}
const signedHookMock = {}

const owner = '0x000a1'

const contextMock = {
  swapResult: {
    orderToSign: {
      validTo: 1750150784,
    },
    tradeParameters: {
      owner,
    },
  },
  provider: {
    getQuote: jest.fn().mockResolvedValue(bridgingQuoteMock),
    getUnsignedBridgeCall: jest.fn().mockResolvedValue(unsignedBridgeCallMock),
    getSignedHook: jest.fn().mockResolvedValue(signedHookMock),
  },
  signer: {},
  hookGasLimit: 100000n,
} as unknown as BridgeResultContext

describe('getBridgeSignedHook', () => {
  afterEach(() => {
    jest.clearAllMocks()
  })

  it('Should create a bridge hook nonce based on orderId and specified owner', async () => {
    await getBridgeSignedHook(bridgeRequestMock, contextMock)

    expect(contextMock.provider.getSignedHook).toHaveBeenCalledTimes(1)
    expect(contextMock.provider.getSignedHook).toHaveBeenCalledWith(
      bridgeRequestMock.sellTokenChainId,
      unsignedBridgeCallMock,
      contextMock.signer,
      // nonce
      '0xf01825773465a7291865614a7f831f001fe880f3aa482b34a4f8f8997bce9803',
      // deadline
      1750150784n,
      contextMock.hookGasLimit,
    )
  })

  it('Should calculate deadline based on orderToSign.validTo first of all', async () => {
    const expectedValidTo = 1750000000

    await getBridgeSignedHook(bridgeRequestMock, {
      ...contextMock,
      swapResult: {
        orderToSign: {
          validTo: expectedValidTo,
        },
      },
    } as unknown as BridgeResultContext)

    expect(contextMock.provider.getSignedHook).toHaveBeenCalledTimes(1)
    expect(contextMock.provider.getSignedHook).toHaveBeenCalledWith(
      expect.anything(),
      expect.anything(),
      expect.anything(),
      expect.anything(),
      // deadline
      BigInt(expectedValidTo),
      expect.anything(),
    )
  })

  it('Should use validTo override for deadline if set', async () => {
    const expectedValidTo = 2900000000

    await getBridgeSignedHook(bridgeRequestMock, {
      ...contextMock,
      swapResult: {
        orderToSign: {
          validTo: 1750000000,
        },
      },
      validToOverride: expectedValidTo,
    } as unknown as BridgeResultContext)

    expect(contextMock.provider.getSignedHook).toHaveBeenCalledTimes(1)
    expect(contextMock.provider.getSignedHook).toHaveBeenCalledWith(
      expect.anything(),
      expect.anything(),
      expect.anything(),
      expect.anything(),
      // deadline
      BigInt(expectedValidTo),
      expect.anything(),
    )
  })
})
