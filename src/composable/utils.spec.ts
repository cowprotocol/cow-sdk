import { decodeParams, encodeParams, isValidAbi } from './utils'
import { TwapStruct, transformDataToStruct } from './types/Twap'
import { TWAP_PARAMS_TEST } from './types/twap.spec'

const TWAP_STRUCT_ABI = [
  'tuple(address sellToken, address buyToken, address receiver, uint256 partSellAmount, uint256 minPartLimit, uint256 t0, uint256 n, uint256 t, uint256 span, bytes32 appData)',
]

const CONDITIONAL_ORDER_PARAMS = {
  handler: '0x6cF1e9cA41f7611dEf408122793c358a3d11E5a5',
  salt: '0x60864964e82f232a1a5bfada34d8bb0fdc73b0642be4a4086eb55176654db064',
  staticInput:
    '0x00000000000000000000000000000000000000000000000000000000000000200000000000000000000000006cf1e9ca41f7611def408122793c358a3d11e5a560864964e82f232a1a5bfada34d8bb0fdc73b0642be4a4086eb55176654db064000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000001400000000000000000000000006810e776880c02933d47db1b9fc05908e5386b96000000000000000000000000dae5f1590db13e3b40423b5b5c5fbf175515910b000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef000000000000000000000000000000000000000000000000016345785d8a0000000000000000000000000000000000000000000000000000016345785d8a00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000000000000000000000000000000000000000e100000000000000000000000000000000000000000000000000000000000000000d51f28edffcaaa76be4a22f6375ad289272c037f3cc072345676e88d92ced8b5',
}
const ABI_ENCODED_ORDER =
  '0x00000000000000000000000000000000000000000000000000000000000000200000000000000000000000006cf1e9ca41f7611def408122793c358a3d11e5a560864964e82f232a1a5bfada34d8bb0fdc73b0642be4a4086eb55176654db064000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000001e000000000000000000000000000000000000000000000000000000000000000200000000000000000000000006cf1e9ca41f7611def408122793c358a3d11e5a560864964e82f232a1a5bfada34d8bb0fdc73b0642be4a4086eb55176654db064000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000001400000000000000000000000006810e776880c02933d47db1b9fc05908e5386b96000000000000000000000000dae5f1590db13e3b40423b5b5c5fbf175515910b000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef000000000000000000000000000000000000000000000000016345785d8a0000000000000000000000000000000000000000000000000000016345785d8a00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000000000000000000000000000000000000000e100000000000000000000000000000000000000000000000000000000000000000d51f28edffcaaa76be4a22f6375ad289272c037f3cc072345676e88d92ced8b5'

const TWAP_STRUCT: TwapStruct = transformDataToStruct(TWAP_PARAMS_TEST)

describe('encodeParams', () => {
  test('encodeParams: Fails if invalid params', () => {
    expect(() => encodeParams({ handler: '0xdeadbeef', salt: '0x', staticInput: '0x' })).toThrow()
  })

  test('encodeParams: Happy path', () => {
    expect(encodeParams(CONDITIONAL_ORDER_PARAMS)).toEqual(ABI_ENCODED_ORDER)
  })
})

describe('decodeParams', () => {
  test('decodeParams: Fails if invalid params', () => {
    expect(() => decodeParams('0x')).toThrow()
  })

  test('decodeParams: Happy path', () => {
    expect(decodeParams(ABI_ENCODED_ORDER)).toEqual(CONDITIONAL_ORDER_PARAMS)
  })
})

describe('isValidAbi', () => {
  test('isValidAbi: Fails if invalid params', () => {
    expect(isValidAbi(TWAP_STRUCT_ABI, ['0x0'])).toEqual(false)
  })

  test('isValidAbi: Happy path', () => {
    expect(isValidAbi(TWAP_STRUCT_ABI, [TWAP_STRUCT])).toEqual(true)
  })
})
